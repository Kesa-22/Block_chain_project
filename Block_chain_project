from hashlib import sha256
import json
import time
from flask import Flask, request
from Crypto.PublicKey import RSA
from Crypto.Signature import PKCS1_v1_5
from Crypto.Hash import SHA256
import binascii

class Block:
    def __init__(self, index, timestamp, data, previous_hash):
        self.index = index
        self.timestamp = timestamp
        self.data = data
        self.previous_hash = previous_hash
        self.hash = self.calculate_hash()

    def calculate_hash(self):
        block_string = json.dumps(self.__dict__, sort_keys=True)
        return sha256(block_string.encode()).hexdigest()

class Blockchain:
    def __init__(self):
        self.chain = [self.create_genesis_block()]
        self.pending_transactions = []
        self.difficulty = 2
        self.mining_reward = 10
        self.nodes = set()

    def create_genesis_block(self):
        return Block(0, time.time(), "Genesis Block", "0")

    def get_latest_block(self):
        return self.chain[-1]

    def add_block(self, new_block):
        new_block.previous_hash = self.get_latest_block().hash
        new_block.hash = new_block.calculate_hash()
        self.chain.append(new_block)

    def proof_of_work(self, block):
        block.nonce = 0
        computed_hash = block.calculate_hash()
        while not computed_hash.startswith('0' * self.difficulty):
            block.nonce += 1
            computed_hash = block.calculate_hash()
        return computed_hash

    def add_transaction(self, sender, recipient, data, signature):
        transaction = {'sender': sender,
                       'recipient': recipient,
                       'data': data,
                       'signature': signature}
        self.pending_transactions.append(transaction)

    def mine_block(self, miner_address):
        if not self.pending_transactions:
            return None

        last_block = self.get_latest_block()
        new_block = Block(last_block.index + 1, time.time(), self.pending_transactions, last_block.hash)
        new_block.hash = self.proof_of_work(new_block)
        self.add_block(new_block)

        self.pending_transactions = [{'sender': 'Blockchain',
                                      'recipient': miner_address,
                                      'data': f'Mining reward: {self.mining_reward}',
                                      'signature': None}]

        return new_block

    def add_node(self, node_address):
        self.nodes.add(node_address)

    def validate_chain(self):
        for i in range(1, len(self.chain)):
            current_block = self.chain[i]
            previous_block = self.chain[i - 1]
            if current_block.hash != current_block.calculate_hash():
                return False
            if current_block.previous_hash != previous_block.hash:
                return False
        return True

app = Flask(__name__)
blockchain = Blockchain()

@app.route('/add_transaction', methods=['POST'])
def add_transaction():
    data = request.get_json()
    required_fields = ['sender', 'recipient', 'data', 'signature']
    if not all(field in data for field in required_fields):
        return 'Missing fields', 400

    sender = data['sender']
    recipient = data['recipient']
    transaction_data = data['data']
    signature = data['signature']

    if sender == 'Blockchain':
        return 'Invalid sender', 400

    if blockchain.validate_transaction(sender, signature, transaction_data):
        blockchain.add_transaction(sender, recipient, transaction_data, signature)
        return 'Transaction added to the block', 201
    else:
        return 'Invalid transaction', 400

@app.route('/mine_block', methods=['GET'])
def mine_block():
    miner_address = request.args.get('miner_address')
    if not miner_address:
        return 'Miner address is required', 400
    mined_block = blockchain.mine_block(miner_address)
    if mined_block:
        response = {'message': 'Block mined successfully',
                    'block': mined_block.__dict__}
        return json.dumps(response), 200
    else:
        return 'No transactions to mine', 400

@app.route('/get_chain', methods=['GET'])
def get_chain():
    chain_data = []
    for block in blockchain.chain:
        chain_data.append(block.__dict__)
    return json.dumps({"length": len(chain_data), "chain": chain_data})

if __name__ == '__main__':
    app.run(port=5000)
